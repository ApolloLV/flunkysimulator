// source: flunkyprotocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var game_objects_pb = require('./game_objects_pb.js');
goog.object.extend(proto, game_objects_pb);
var video_objects_pb = require('./video_objects_pb.js');
goog.object.extend(proto, video_objects_pb);
goog.exportSymbol('proto.endpoints.flunky.simulator.AbgegebenReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.AbgegebenResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.EnumLoginStatus', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.KickPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.KickPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.LogReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.LogResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ModifyStrafbierCountReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ModifyStrafbierCountResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.RegisterPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.RegisterPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ResetGameReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ResetGameResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SelectThrowingPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SelectThrowingPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SendMessageReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SendMessageResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamStateReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamStateResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamVideoEventsReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamVideoEventsResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SwitchTeamReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SwitchTeamResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ThrowReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ThrowResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.LogResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.LogResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.LogResp.displayName = 'proto.endpoints.flunky.simulator.LogResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.LogReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.LogReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.LogReq.displayName = 'proto.endpoints.flunky.simulator.LogReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamVideoEventsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamVideoEventsResp.displayName = 'proto.endpoints.flunky.simulator.StreamVideoEventsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamVideoEventsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamVideoEventsReq.displayName = 'proto.endpoints.flunky.simulator.StreamVideoEventsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamStateResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamStateResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamStateResp.displayName = 'proto.endpoints.flunky.simulator.StreamStateResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamStateReq.displayName = 'proto.endpoints.flunky.simulator.StreamStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SelectThrowingPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.displayName = 'proto.endpoints.flunky.simulator.SelectThrowingPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SelectThrowingPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.displayName = 'proto.endpoints.flunky.simulator.SelectThrowingPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ModifyStrafbierCountResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.displayName = 'proto.endpoints.flunky.simulator.ModifyStrafbierCountResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ModifyStrafbierCountReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.displayName = 'proto.endpoints.flunky.simulator.ModifyStrafbierCountReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SendMessageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SendMessageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SendMessageResp.displayName = 'proto.endpoints.flunky.simulator.SendMessageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SendMessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SendMessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SendMessageReq.displayName = 'proto.endpoints.flunky.simulator.SendMessageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ResetGameResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ResetGameResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ResetGameResp.displayName = 'proto.endpoints.flunky.simulator.ResetGameResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ResetGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ResetGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ResetGameReq.displayName = 'proto.endpoints.flunky.simulator.ResetGameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SwitchTeamResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SwitchTeamResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SwitchTeamResp.displayName = 'proto.endpoints.flunky.simulator.SwitchTeamResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SwitchTeamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SwitchTeamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SwitchTeamReq.displayName = 'proto.endpoints.flunky.simulator.SwitchTeamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.KickPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.KickPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.KickPlayerResp.displayName = 'proto.endpoints.flunky.simulator.KickPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.KickPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.KickPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.KickPlayerReq.displayName = 'proto.endpoints.flunky.simulator.KickPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.RegisterPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.RegisterPlayerResp.displayName = 'proto.endpoints.flunky.simulator.RegisterPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.RegisterPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.RegisterPlayerReq.displayName = 'proto.endpoints.flunky.simulator.RegisterPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.AbgegebenResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.AbgegebenResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.AbgegebenResp.displayName = 'proto.endpoints.flunky.simulator.AbgegebenResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.AbgegebenReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.AbgegebenReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.AbgegebenReq.displayName = 'proto.endpoints.flunky.simulator.AbgegebenReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ThrowReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ThrowReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ThrowReq.displayName = 'proto.endpoints.flunky.simulator.ThrowReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ThrowResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ThrowResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ThrowResp.displayName = 'proto.endpoints.flunky.simulator.ThrowResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.LogResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.LogResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.LogResp}
 */
proto.endpoints.flunky.simulator.LogResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.LogResp;
  return proto.endpoints.flunky.simulator.LogResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.LogResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.LogResp}
 */
proto.endpoints.flunky.simulator.LogResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.LogResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.LogResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.LogResp} returns this
 */
proto.endpoints.flunky.simulator.LogResp.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.LogResp} returns this
 */
proto.endpoints.flunky.simulator.LogResp.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.LogReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.LogReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.LogReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.LogReq}
 */
proto.endpoints.flunky.simulator.LogReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.LogReq;
  return proto.endpoints.flunky.simulator.LogReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.LogReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.LogReq}
 */
proto.endpoints.flunky.simulator.LogReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.LogReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.LogReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.LogReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamVideoEventsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && video_objects_pb.VideoEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsResp}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamVideoEventsResp;
  return proto.endpoints.flunky.simulator.StreamVideoEventsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsResp}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new video_objects_pb.VideoEvent;
      reader.readMessage(value,video_objects_pb.VideoEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamVideoEventsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      video_objects_pb.VideoEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoEvent event = 1;
 * @return {?proto.endpoints.flunky.simulator.VideoEvent}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.getEvent = function() {
  return /** @type{?proto.endpoints.flunky.simulator.VideoEvent} */ (
    jspb.Message.getWrapperField(this, video_objects_pb.VideoEvent, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.VideoEvent|undefined} value
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsResp} returns this
*/
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsResp} returns this
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsResp.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamVideoEventsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsReq}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamVideoEventsReq;
  return proto.endpoints.flunky.simulator.StreamVideoEventsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamVideoEventsReq}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamVideoEventsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamVideoEventsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamVideoEventsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamStateResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && game_objects_pb.GameState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp}
 */
proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamStateResp;
  return proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp}
 */
proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new game_objects_pb.GameState;
      reader.readMessage(value,game_objects_pb.GameState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamStateResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      game_objects_pb.GameState.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameState state = 1;
 * @return {?proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.getState = function() {
  return /** @type{?proto.endpoints.flunky.simulator.GameState} */ (
    jspb.Message.getWrapperField(this, game_objects_pb.GameState, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.GameState|undefined} value
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp} returns this
*/
proto.endpoints.flunky.simulator.StreamStateResp.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp} returns this
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamStateReq}
 */
proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamStateReq;
  return proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamStateReq}
 */
proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SelectThrowingPlayerResp;
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SelectThrowingPlayerReq;
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.getTargetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.setTargetname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountResp}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ModifyStrafbierCountResp;
  return proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountResp}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetteam: jspb.Message.getFieldWithDefault(msg, 2, 0),
    increment: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ModifyStrafbierCountReq;
  return proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumTeams} */ (reader.readEnum());
      msg.setTargetteam(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncrement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetteam();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIncrement();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} returns this
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EnumTeams targetTeam = 2;
 * @return {!proto.endpoints.flunky.simulator.EnumTeams}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.getTargetteam = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumTeams} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumTeams} value
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} returns this
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.setTargetteam = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool increment = 3;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.getIncrement = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.ModifyStrafbierCountReq} returns this
 */
proto.endpoints.flunky.simulator.ModifyStrafbierCountReq.prototype.setIncrement = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SendMessageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SendMessageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SendMessageResp}
 */
proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SendMessageResp;
  return proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SendMessageResp}
 */
proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SendMessageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SendMessageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SendMessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq}
 */
proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SendMessageReq;
  return proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq}
 */
proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SendMessageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq} returns this
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq} returns this
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ResetGameResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ResetGameResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ResetGameResp}
 */
proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ResetGameResp;
  return proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ResetGameResp}
 */
proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ResetGameResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ResetGameResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ResetGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq}
 */
proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ResetGameReq;
  return proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq}
 */
proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ResetGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq} returns this
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SwitchTeamResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamResp}
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SwitchTeamResp;
  return proto.endpoints.flunky.simulator.SwitchTeamResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamResp}
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SwitchTeamResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SwitchTeamResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SwitchTeamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetteam: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamReq}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SwitchTeamReq;
  return proto.endpoints.flunky.simulator.SwitchTeamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamReq}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetname(value);
      break;
    case 3:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumTeams} */ (reader.readEnum());
      msg.setTargetteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SwitchTeamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SwitchTeamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetteam();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamReq} returns this
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.getTargetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamReq} returns this
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.setTargetname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EnumTeams targetTeam = 3;
 * @return {!proto.endpoints.flunky.simulator.EnumTeams}
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.getTargetteam = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumTeams} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumTeams} value
 * @return {!proto.endpoints.flunky.simulator.SwitchTeamReq} returns this
 */
proto.endpoints.flunky.simulator.SwitchTeamReq.prototype.setTargetteam = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.KickPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerResp}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.KickPlayerResp;
  return proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerResp}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.KickPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.KickPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.KickPlayerReq;
  return proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.KickPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.getTargetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.setTargetname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.RegisterPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    registeredname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.RegisterPlayerResp;
  return proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumLoginStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisteredname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.RegisterPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRegisteredname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional EnumLoginStatus status = 1;
 * @return {!proto.endpoints.flunky.simulator.EnumLoginStatus}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.getStatus = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumLoginStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumLoginStatus} value
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp} returns this
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string registeredName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.getRegisteredname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp} returns this
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.setRegisteredname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.RegisterPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.RegisterPlayerReq;
  return proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.RegisterPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.AbgegebenResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.AbgegebenResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.AbgegebenResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.AbgegebenResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.AbgegebenResp}
 */
proto.endpoints.flunky.simulator.AbgegebenResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.AbgegebenResp;
  return proto.endpoints.flunky.simulator.AbgegebenResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.AbgegebenResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.AbgegebenResp}
 */
proto.endpoints.flunky.simulator.AbgegebenResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.AbgegebenResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.AbgegebenResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.AbgegebenResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.AbgegebenResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.AbgegebenReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.AbgegebenReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.AbgegebenReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    setto: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.AbgegebenReq}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.AbgegebenReq;
  return proto.endpoints.flunky.simulator.AbgegebenReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.AbgegebenReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.AbgegebenReq}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetname(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSetto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.AbgegebenReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.AbgegebenReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.AbgegebenReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSetto();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.AbgegebenReq} returns this
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targetName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.getTargetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.AbgegebenReq} returns this
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.setTargetname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool setTo = 3;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.getSetto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.AbgegebenReq} returns this
 */
proto.endpoints.flunky.simulator.AbgegebenReq.prototype.setSetto = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ThrowReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strength: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ThrowReq}
 */
proto.endpoints.flunky.simulator.ThrowReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ThrowReq;
  return proto.endpoints.flunky.simulator.ThrowReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ThrowReq}
 */
proto.endpoints.flunky.simulator.ThrowReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumThrowStrength} */ (reader.readEnum());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ThrowReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.ThrowReq} returns this
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EnumThrowStrength strength = 2;
 * @return {!proto.endpoints.flunky.simulator.EnumThrowStrength}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.getStrength = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumThrowStrength} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumThrowStrength} value
 * @return {!proto.endpoints.flunky.simulator.ThrowReq} returns this
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.setStrength = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ThrowResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ThrowResp}
 */
proto.endpoints.flunky.simulator.ThrowResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ThrowResp;
  return proto.endpoints.flunky.simulator.ThrowResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ThrowResp}
 */
proto.endpoints.flunky.simulator.ThrowResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ThrowResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.ThrowResp} returns this
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.EnumLoginStatus = {
  LOGIN_STATUS_UNKNOWN: 0,
  LOGIN_STATUS_SUCCESS: 1,
  LOGIN_STATUS_NAME_TAKEN: 2,
  LOGIN_STATUS_SECRET_MISMATCH: 3,
  LOGIN_STATUS_EMPTY: 4
};

goog.object.extend(exports, proto.endpoints.flunky.simulator);
