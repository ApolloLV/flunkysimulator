// source: flunkyprotocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.endpoints.flunky.simulator.EnumThrowStrength', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.Event', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.Event.EventOneofCase', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.GameState', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.KickPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.KickPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.LogReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.LogResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.PlayVideosEvent', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.Player', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.PrepareVideoEvent', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.RegisterPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.RegisterPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ResetGameReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ResetGameResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SelectThrowingPlayerReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SelectThrowingPlayerResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SendMessageReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.SendMessageResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamEventsReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamEventsResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamStateReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.StreamStateResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ThrowReq', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.ThrowResp', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.TimedVideo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.LogResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.LogResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.LogResp.displayName = 'proto.endpoints.flunky.simulator.LogResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.LogReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.LogReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.LogReq.displayName = 'proto.endpoints.flunky.simulator.LogReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamEventsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamEventsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamEventsResp.displayName = 'proto.endpoints.flunky.simulator.StreamEventsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamEventsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamEventsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamEventsReq.displayName = 'proto.endpoints.flunky.simulator.StreamEventsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamStateResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamStateResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamStateResp.displayName = 'proto.endpoints.flunky.simulator.StreamStateResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.StreamStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.StreamStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.StreamStateReq.displayName = 'proto.endpoints.flunky.simulator.StreamStateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SelectThrowingPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.displayName = 'proto.endpoints.flunky.simulator.SelectThrowingPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SelectThrowingPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.displayName = 'proto.endpoints.flunky.simulator.SelectThrowingPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SendMessageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SendMessageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SendMessageResp.displayName = 'proto.endpoints.flunky.simulator.SendMessageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.SendMessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.SendMessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.SendMessageReq.displayName = 'proto.endpoints.flunky.simulator.SendMessageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ResetGameResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ResetGameResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ResetGameResp.displayName = 'proto.endpoints.flunky.simulator.ResetGameResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ResetGameReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ResetGameReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ResetGameReq.displayName = 'proto.endpoints.flunky.simulator.ResetGameReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.KickPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.KickPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.KickPlayerResp.displayName = 'proto.endpoints.flunky.simulator.KickPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.KickPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.KickPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.KickPlayerReq.displayName = 'proto.endpoints.flunky.simulator.KickPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.RegisterPlayerResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.RegisterPlayerResp.displayName = 'proto.endpoints.flunky.simulator.RegisterPlayerResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.RegisterPlayerReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.RegisterPlayerReq.displayName = 'proto.endpoints.flunky.simulator.RegisterPlayerReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ThrowReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ThrowReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ThrowReq.displayName = 'proto.endpoints.flunky.simulator.ThrowReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.ThrowResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.ThrowResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.ThrowResp.displayName = 'proto.endpoints.flunky.simulator.ThrowResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.endpoints.flunky.simulator.Event.oneofGroups_);
};
goog.inherits(proto.endpoints.flunky.simulator.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.Event.displayName = 'proto.endpoints.flunky.simulator.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoints.flunky.simulator.PrepareVideoEvent.repeatedFields_, null);
};
goog.inherits(proto.endpoints.flunky.simulator.PrepareVideoEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.PrepareVideoEvent.displayName = 'proto.endpoints.flunky.simulator.PrepareVideoEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.PlayVideosEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoints.flunky.simulator.PlayVideosEvent.repeatedFields_, null);
};
goog.inherits(proto.endpoints.flunky.simulator.PlayVideosEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.PlayVideosEvent.displayName = 'proto.endpoints.flunky.simulator.PlayVideosEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.TimedVideo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.TimedVideo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.TimedVideo.displayName = 'proto.endpoints.flunky.simulator.TimedVideo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoints.flunky.simulator.GameState.repeatedFields_, null);
};
goog.inherits(proto.endpoints.flunky.simulator.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.GameState.displayName = 'proto.endpoints.flunky.simulator.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.Player.displayName = 'proto.endpoints.flunky.simulator.Player';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.LogResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.LogResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.LogResp}
 */
proto.endpoints.flunky.simulator.LogResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.LogResp;
  return proto.endpoints.flunky.simulator.LogResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.LogResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.LogResp}
 */
proto.endpoints.flunky.simulator.LogResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.LogResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.LogResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.LogResp.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.LogResp} returns this
 */
proto.endpoints.flunky.simulator.LogResp.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.LogReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.LogReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.LogReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.LogReq}
 */
proto.endpoints.flunky.simulator.LogReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.LogReq;
  return proto.endpoints.flunky.simulator.LogReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.LogReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.LogReq}
 */
proto.endpoints.flunky.simulator.LogReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.LogReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.LogReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.LogReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.LogReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamEventsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamEventsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamEventsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && proto.endpoints.flunky.simulator.Event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamEventsResp}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamEventsResp;
  return proto.endpoints.flunky.simulator.StreamEventsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamEventsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamEventsResp}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.Event;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamEventsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamEventsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamEventsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.Event.serializeBinaryToWriter
    );
  }
};


/**
 * optional Event event = 1;
 * @return {?proto.endpoints.flunky.simulator.Event}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.getEvent = function() {
  return /** @type{?proto.endpoints.flunky.simulator.Event} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.Event, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.Event|undefined} value
 * @return {!proto.endpoints.flunky.simulator.StreamEventsResp} returns this
*/
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.StreamEventsResp} returns this
 */
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.StreamEventsResp.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamEventsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamEventsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamEventsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamEventsReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamEventsReq}
 */
proto.endpoints.flunky.simulator.StreamEventsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamEventsReq;
  return proto.endpoints.flunky.simulator.StreamEventsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamEventsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamEventsReq}
 */
proto.endpoints.flunky.simulator.StreamEventsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamEventsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamEventsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamEventsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamEventsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamStateResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.endpoints.flunky.simulator.GameState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp}
 */
proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamStateResp;
  return proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp}
 */
proto.endpoints.flunky.simulator.StreamStateResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.GameState;
      reader.readMessage(value,proto.endpoints.flunky.simulator.GameState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamStateResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamStateResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.GameState.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameState state = 1;
 * @return {?proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.getState = function() {
  return /** @type{?proto.endpoints.flunky.simulator.GameState} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.GameState, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.GameState|undefined} value
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp} returns this
*/
proto.endpoints.flunky.simulator.StreamStateResp.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.StreamStateResp} returns this
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.StreamStateResp.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.StreamStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.StreamStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.StreamStateReq}
 */
proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.StreamStateReq;
  return proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.StreamStateReq}
 */
proto.endpoints.flunky.simulator.StreamStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.StreamStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.StreamStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.StreamStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.StreamStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SelectThrowingPlayerResp;
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SelectThrowingPlayerReq;
  return proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targeName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.getTargename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SelectThrowingPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.SelectThrowingPlayerReq.prototype.setTargename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SendMessageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SendMessageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SendMessageResp}
 */
proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SendMessageResp;
  return proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SendMessageResp}
 */
proto.endpoints.flunky.simulator.SendMessageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SendMessageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SendMessageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SendMessageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.SendMessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq}
 */
proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.SendMessageReq;
  return proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq}
 */
proto.endpoints.flunky.simulator.SendMessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.SendMessageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.SendMessageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.SendMessageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq} returns this
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.SendMessageReq} returns this
 */
proto.endpoints.flunky.simulator.SendMessageReq.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ResetGameResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ResetGameResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ResetGameResp}
 */
proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ResetGameResp;
  return proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ResetGameResp}
 */
proto.endpoints.flunky.simulator.ResetGameResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ResetGameResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ResetGameResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ResetGameResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ResetGameReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq}
 */
proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ResetGameReq;
  return proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq}
 */
proto.endpoints.flunky.simulator.ResetGameReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ResetGameReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ResetGameReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ResetGameReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.ResetGameReq} returns this
 */
proto.endpoints.flunky.simulator.ResetGameReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.KickPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerResp}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.KickPlayerResp;
  return proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerResp}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.KickPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.KickPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.KickPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.KickPlayerReq;
  return proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.KickPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.KickPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.KickPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string targeName = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.getTargename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.KickPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.KickPlayerReq.prototype.setTargename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.RegisterPlayerResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.RegisterPlayerResp;
  return proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerResp}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.RegisterPlayerResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.RegisterPlayerReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.RegisterPlayerReq;
  return proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.RegisterPlayerReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.RegisterPlayerReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.RegisterPlayerReq} returns this
 */
proto.endpoints.flunky.simulator.RegisterPlayerReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ThrowReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    playername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strength: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ThrowReq}
 */
proto.endpoints.flunky.simulator.ThrowReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ThrowReq;
  return proto.endpoints.flunky.simulator.ThrowReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ThrowReq}
 */
proto.endpoints.flunky.simulator.ThrowReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 2:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumThrowStrength} */ (reader.readEnum());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ThrowReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ThrowReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string playerName = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.ThrowReq} returns this
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EnumThrowStrength strength = 2;
 * @return {!proto.endpoints.flunky.simulator.EnumThrowStrength}
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.getStrength = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumThrowStrength} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumThrowStrength} value
 * @return {!proto.endpoints.flunky.simulator.ThrowReq} returns this
 */
proto.endpoints.flunky.simulator.ThrowReq.prototype.setStrength = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.ThrowResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.ThrowResp}
 */
proto.endpoints.flunky.simulator.ThrowResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.ThrowResp;
  return proto.endpoints.flunky.simulator.ThrowResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.ThrowResp}
 */
proto.endpoints.flunky.simulator.ThrowResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.ThrowResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.ThrowResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.ThrowResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.ThrowResp} returns this
 */
proto.endpoints.flunky.simulator.ThrowResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.endpoints.flunky.simulator.Event.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.Event.EventOneofCase = {
  EVENT_ONEOF_NOT_SET: 0,
  PREPAREVIDEO: 1,
  PLAYVIDEOS: 2
};

/**
 * @return {proto.endpoints.flunky.simulator.Event.EventOneofCase}
 */
proto.endpoints.flunky.simulator.Event.prototype.getEventOneofCase = function() {
  return /** @type {proto.endpoints.flunky.simulator.Event.EventOneofCase} */(jspb.Message.computeOneofCase(this, proto.endpoints.flunky.simulator.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    preparevideo: (f = msg.getPreparevideo()) && proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject(includeInstance, f),
    playvideos: (f = msg.getPlayvideos()) && proto.endpoints.flunky.simulator.PlayVideosEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.Event}
 */
proto.endpoints.flunky.simulator.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.Event;
  return proto.endpoints.flunky.simulator.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.Event}
 */
proto.endpoints.flunky.simulator.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.PrepareVideoEvent;
      reader.readMessage(value,proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader);
      msg.setPreparevideo(value);
      break;
    case 2:
      var value = new proto.endpoints.flunky.simulator.PlayVideosEvent;
      reader.readMessage(value,proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader);
      msg.setPlayvideos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreparevideo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter
    );
  }
  f = message.getPlayvideos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrepareVideoEvent prepareVideo = 1;
 * @return {?proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.Event.prototype.getPreparevideo = function() {
  return /** @type{?proto.endpoints.flunky.simulator.PrepareVideoEvent} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.PrepareVideoEvent, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.PrepareVideoEvent|undefined} value
 * @return {!proto.endpoints.flunky.simulator.Event} returns this
*/
proto.endpoints.flunky.simulator.Event.prototype.setPreparevideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.endpoints.flunky.simulator.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.Event} returns this
 */
proto.endpoints.flunky.simulator.Event.prototype.clearPreparevideo = function() {
  return this.setPreparevideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.Event.prototype.hasPreparevideo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayVideosEvent playVideos = 2;
 * @return {?proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.Event.prototype.getPlayvideos = function() {
  return /** @type{?proto.endpoints.flunky.simulator.PlayVideosEvent} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.PlayVideosEvent, 2));
};


/**
 * @param {?proto.endpoints.flunky.simulator.PlayVideosEvent|undefined} value
 * @return {!proto.endpoints.flunky.simulator.Event} returns this
*/
proto.endpoints.flunky.simulator.Event.prototype.setPlayvideos = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.endpoints.flunky.simulator.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.Event} returns this
 */
proto.endpoints.flunky.simulator.Event.prototype.clearPlayvideos = function() {
  return this.setPlayvideos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.Event.prototype.hasPlayvideos = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.PrepareVideoEvent;
  return proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string url = 1;
 * @return {!Array<string>}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.getUrlList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent} returns this
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.setUrlList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent} returns this
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.addUrl = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent} returns this
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.clearUrlList = function() {
  return this.setUrlList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.PlayVideosEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    videosList: jspb.Message.toObjectList(msg.getVideosList(),
    proto.endpoints.flunky.simulator.TimedVideo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.PlayVideosEvent;
  return proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.TimedVideo;
      reader.readMessage(value,proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader);
      msg.addVideos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TimedVideo videos = 1;
 * @return {!Array<!proto.endpoints.flunky.simulator.TimedVideo>}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.getVideosList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.TimedVideo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.TimedVideo, 1));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.TimedVideo>} value
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent} returns this
*/
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.setVideosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.TimedVideo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.addVideos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoints.flunky.simulator.TimedVideo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent} returns this
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.clearVideosList = function() {
  return this.setVideosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.TimedVideo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.TimedVideo.toObject = function(includeInstance, msg) {
  var f, obj = {
    delay: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mirrored: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.TimedVideo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.TimedVideo;
  return proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirrored(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMirrored();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 delay = 1;
 * @return {number}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool mirrored = 3;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getMirrored = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setMirrored = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoints.flunky.simulator.GameState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerteamaList: jspb.Message.toObjectList(msg.getPlayerteamaList(),
    proto.endpoints.flunky.simulator.Player.toObject, includeInstance),
    playerteambList: jspb.Message.toObjectList(msg.getPlayerteambList(),
    proto.endpoints.flunky.simulator.Player.toObject, includeInstance),
    throwingplayer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strafbierteama: jspb.Message.getFieldWithDefault(msg, 4, 0),
    strafbierteamb: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.GameState;
  return proto.endpoints.flunky.simulator.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.Player;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader);
      msg.addPlayerteama(value);
      break;
    case 2:
      var value = new proto.endpoints.flunky.simulator.Player;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader);
      msg.addPlayerteamb(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThrowingplayer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStrafbierteama(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStrafbierteamb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerteamaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayerteambList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter
    );
  }
  f = message.getThrowingplayer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrafbierteama();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStrafbierteamb();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * repeated Player playerTeamA = 1;
 * @return {!Array<!proto.endpoints.flunky.simulator.Player>}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getPlayerteamaList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.Player, 1));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.Player>} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setPlayerteamaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.GameState.prototype.addPlayerteama = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoints.flunky.simulator.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearPlayerteamaList = function() {
  return this.setPlayerteamaList([]);
};


/**
 * repeated Player playerTeamB = 2;
 * @return {!Array<!proto.endpoints.flunky.simulator.Player>}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getPlayerteambList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.Player, 2));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.Player>} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setPlayerteambList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.GameState.prototype.addPlayerteamb = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.endpoints.flunky.simulator.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearPlayerteambList = function() {
  return this.setPlayerteambList([]);
};


/**
 * optional string throwingPlayer = 3;
 * @return {string}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getThrowingplayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setThrowingplayer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 strafbierTeamA = 4;
 * @return {number}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getStrafbierteama = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setStrafbierteama = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 strafbierTeamB = 5;
 * @return {number}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getStrafbierteamb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setStrafbierteamb = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    abgegeben: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    spectator: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.Player;
  return proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAbgegeben(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpectator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAbgegeben();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSpectator();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.Player} returns this
 */
proto.endpoints.flunky.simulator.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool abgegeben = 2;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.Player.prototype.getAbgegeben = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.Player} returns this
 */
proto.endpoints.flunky.simulator.Player.prototype.setAbgegeben = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool spectator = 3;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.Player.prototype.getSpectator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.Player} returns this
 */
proto.endpoints.flunky.simulator.Player.prototype.setSpectator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.EnumThrowStrength = {
  UNKNOWN: 0,
  SOFT: 1,
  MEDIUM: 2,
  HARD: 3
};

goog.object.extend(exports, proto.endpoints.flunky.simulator);
