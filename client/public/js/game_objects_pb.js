// source: game_objects.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.endpoints.flunky.simulator.EnumTeams', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.EnumThrowStrength', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.GameState', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.Player', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.RuleConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoints.flunky.simulator.GameState.repeatedFields_, null);
};
goog.inherits(proto.endpoints.flunky.simulator.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.GameState.displayName = 'proto.endpoints.flunky.simulator.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.RuleConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.RuleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.RuleConfig.displayName = 'proto.endpoints.flunky.simulator.RuleConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.Player.displayName = 'proto.endpoints.flunky.simulator.Player';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoints.flunky.simulator.GameState.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerteamaList: jspb.Message.toObjectList(msg.getPlayerteamaList(),
    proto.endpoints.flunky.simulator.Player.toObject, includeInstance),
    playerteambList: jspb.Message.toObjectList(msg.getPlayerteambList(),
    proto.endpoints.flunky.simulator.Player.toObject, includeInstance),
    spectatorsList: jspb.Message.toObjectList(msg.getSpectatorsList(),
    proto.endpoints.flunky.simulator.Player.toObject, includeInstance),
    ruleconfig: (f = msg.getRuleconfig()) && proto.endpoints.flunky.simulator.RuleConfig.toObject(includeInstance, f),
    restingperiod: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    throwingplayer: jspb.Message.getFieldWithDefault(msg, 10, ""),
    strafbierteama: jspb.Message.getFieldWithDefault(msg, 11, 0),
    strafbierteamb: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.GameState;
  return proto.endpoints.flunky.simulator.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.GameState}
 */
proto.endpoints.flunky.simulator.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.Player;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader);
      msg.addPlayerteama(value);
      break;
    case 2:
      var value = new proto.endpoints.flunky.simulator.Player;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader);
      msg.addPlayerteamb(value);
      break;
    case 3:
      var value = new proto.endpoints.flunky.simulator.Player;
      reader.readMessage(value,proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader);
      msg.addSpectators(value);
      break;
    case 8:
      var value = new proto.endpoints.flunky.simulator.RuleConfig;
      reader.readMessage(value,proto.endpoints.flunky.simulator.RuleConfig.deserializeBinaryFromReader);
      msg.setRuleconfig(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestingperiod(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setThrowingplayer(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStrafbierteama(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStrafbierteamb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerteamaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayerteambList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter
    );
  }
  f = message.getSpectatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter
    );
  }
  f = message.getRuleconfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.endpoints.flunky.simulator.RuleConfig.serializeBinaryToWriter
    );
  }
  f = message.getRestingperiod();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getThrowingplayer();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStrafbierteama();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getStrafbierteamb();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * repeated Player playerTeamA = 1;
 * @return {!Array<!proto.endpoints.flunky.simulator.Player>}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getPlayerteamaList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.Player, 1));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.Player>} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setPlayerteamaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.GameState.prototype.addPlayerteama = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoints.flunky.simulator.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearPlayerteamaList = function() {
  return this.setPlayerteamaList([]);
};


/**
 * repeated Player playerTeamB = 2;
 * @return {!Array<!proto.endpoints.flunky.simulator.Player>}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getPlayerteambList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.Player, 2));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.Player>} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setPlayerteambList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.GameState.prototype.addPlayerteamb = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.endpoints.flunky.simulator.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearPlayerteambList = function() {
  return this.setPlayerteambList([]);
};


/**
 * repeated Player spectators = 3;
 * @return {!Array<!proto.endpoints.flunky.simulator.Player>}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getSpectatorsList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.Player, 3));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.Player>} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setSpectatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.GameState.prototype.addSpectators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.endpoints.flunky.simulator.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearSpectatorsList = function() {
  return this.setSpectatorsList([]);
};


/**
 * optional RuleConfig ruleConfig = 8;
 * @return {?proto.endpoints.flunky.simulator.RuleConfig}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getRuleconfig = function() {
  return /** @type{?proto.endpoints.flunky.simulator.RuleConfig} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.RuleConfig, 8));
};


/**
 * @param {?proto.endpoints.flunky.simulator.RuleConfig|undefined} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
*/
proto.endpoints.flunky.simulator.GameState.prototype.setRuleconfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.clearRuleconfig = function() {
  return this.setRuleconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.GameState.prototype.hasRuleconfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool restingPeriod = 9;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getRestingperiod = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setRestingperiod = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string throwingPlayer = 10;
 * @return {string}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getThrowingplayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setThrowingplayer = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 strafbierTeamA = 11;
 * @return {number}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getStrafbierteama = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setStrafbierteama = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 strafbierTeamB = 12;
 * @return {number}
 */
proto.endpoints.flunky.simulator.GameState.prototype.getStrafbierteamb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.GameState} returns this
 */
proto.endpoints.flunky.simulator.GameState.prototype.setStrafbierteamb = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.RuleConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.RuleConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.RuleConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RuleConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    restingperiodlength: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.RuleConfig}
 */
proto.endpoints.flunky.simulator.RuleConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.RuleConfig;
  return proto.endpoints.flunky.simulator.RuleConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.RuleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.RuleConfig}
 */
proto.endpoints.flunky.simulator.RuleConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRestingperiodlength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.RuleConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.RuleConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.RuleConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.RuleConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRestingperiodlength();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 restingPeriodLength = 1;
 * @return {number}
 */
proto.endpoints.flunky.simulator.RuleConfig.prototype.getRestingperiodlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.RuleConfig} returns this
 */
proto.endpoints.flunky.simulator.RuleConfig.prototype.setRestingperiodlength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    abgegeben: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.Player;
  return proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.Player}
 */
proto.endpoints.flunky.simulator.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAbgegeben(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAbgegeben();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.Player} returns this
 */
proto.endpoints.flunky.simulator.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool abgegeben = 2;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.Player.prototype.getAbgegeben = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.Player} returns this
 */
proto.endpoints.flunky.simulator.Player.prototype.setAbgegeben = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.EnumThrowStrength = {
  UNKNOWN_THROW_STRENGTH: 0,
  SOFT_THROW_STRENGTH: 1,
  MEDIUM_THROW_STRENGTH: 2,
  HARD_THROW_STRENGTH: 3
};

/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.EnumTeams = {
  UNKNOWN_TEAMS: 0,
  SPECTATOR_TEAMS: 1,
  TEAM_A_TEAMS: 2,
  TEAM_B_TEAMS: 3
};

goog.object.extend(exports, proto.endpoints.flunky.simulator);
