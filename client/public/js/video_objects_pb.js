// source: video_objects.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.endpoints.flunky.simulator.EnumVideoType', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.PlayVideosEvent', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.PrepareVideoEvent', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.TimedVideo', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.VideoEvent', null, global);
goog.exportSymbol('proto.endpoints.flunky.simulator.VideoEvent.EventOneofCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.VideoEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.endpoints.flunky.simulator.VideoEvent.oneofGroups_);
};
goog.inherits(proto.endpoints.flunky.simulator.VideoEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.VideoEvent.displayName = 'proto.endpoints.flunky.simulator.VideoEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.PrepareVideoEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.PrepareVideoEvent.displayName = 'proto.endpoints.flunky.simulator.PrepareVideoEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.PlayVideosEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoints.flunky.simulator.PlayVideosEvent.repeatedFields_, null);
};
goog.inherits(proto.endpoints.flunky.simulator.PlayVideosEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.PlayVideosEvent.displayName = 'proto.endpoints.flunky.simulator.PlayVideosEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoints.flunky.simulator.TimedVideo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoints.flunky.simulator.TimedVideo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoints.flunky.simulator.TimedVideo.displayName = 'proto.endpoints.flunky.simulator.TimedVideo';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.endpoints.flunky.simulator.VideoEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.VideoEvent.EventOneofCase = {
  EVENT_ONEOF_NOT_SET: 0,
  PREPAREVIDEO: 1,
  PLAYVIDEOS: 2
};

/**
 * @return {proto.endpoints.flunky.simulator.VideoEvent.EventOneofCase}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.getEventOneofCase = function() {
  return /** @type {proto.endpoints.flunky.simulator.VideoEvent.EventOneofCase} */(jspb.Message.computeOneofCase(this, proto.endpoints.flunky.simulator.VideoEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.VideoEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.VideoEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.VideoEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    preparevideo: (f = msg.getPreparevideo()) && proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject(includeInstance, f),
    playvideos: (f = msg.getPlayvideos()) && proto.endpoints.flunky.simulator.PlayVideosEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.VideoEvent}
 */
proto.endpoints.flunky.simulator.VideoEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.VideoEvent;
  return proto.endpoints.flunky.simulator.VideoEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.VideoEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.VideoEvent}
 */
proto.endpoints.flunky.simulator.VideoEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.PrepareVideoEvent;
      reader.readMessage(value,proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader);
      msg.setPreparevideo(value);
      break;
    case 2:
      var value = new proto.endpoints.flunky.simulator.PlayVideosEvent;
      reader.readMessage(value,proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader);
      msg.setPlayvideos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.VideoEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.VideoEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.VideoEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreparevideo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter
    );
  }
  f = message.getPlayvideos();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrepareVideoEvent prepareVideo = 1;
 * @return {?proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.getPreparevideo = function() {
  return /** @type{?proto.endpoints.flunky.simulator.PrepareVideoEvent} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.PrepareVideoEvent, 1));
};


/**
 * @param {?proto.endpoints.flunky.simulator.PrepareVideoEvent|undefined} value
 * @return {!proto.endpoints.flunky.simulator.VideoEvent} returns this
*/
proto.endpoints.flunky.simulator.VideoEvent.prototype.setPreparevideo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.endpoints.flunky.simulator.VideoEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.VideoEvent} returns this
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.clearPreparevideo = function() {
  return this.setPreparevideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.hasPreparevideo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlayVideosEvent playVideos = 2;
 * @return {?proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.getPlayvideos = function() {
  return /** @type{?proto.endpoints.flunky.simulator.PlayVideosEvent} */ (
    jspb.Message.getWrapperField(this, proto.endpoints.flunky.simulator.PlayVideosEvent, 2));
};


/**
 * @param {?proto.endpoints.flunky.simulator.PlayVideosEvent|undefined} value
 * @return {!proto.endpoints.flunky.simulator.VideoEvent} returns this
*/
proto.endpoints.flunky.simulator.VideoEvent.prototype.setPlayvideos = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.endpoints.flunky.simulator.VideoEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoints.flunky.simulator.VideoEvent} returns this
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.clearPlayvideos = function() {
  return this.setPlayvideos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.VideoEvent.prototype.hasPlayvideos = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    videotype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.PrepareVideoEvent;
  return proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumVideoType} */ (reader.readEnum());
      msg.setVideotype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.PrepareVideoEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVideotype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent} returns this
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EnumVideoType videoType = 2;
 * @return {!proto.endpoints.flunky.simulator.EnumVideoType}
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.getVideotype = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumVideoType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumVideoType} value
 * @return {!proto.endpoints.flunky.simulator.PrepareVideoEvent} returns this
 */
proto.endpoints.flunky.simulator.PrepareVideoEvent.prototype.setVideotype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.PlayVideosEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    videosList: jspb.Message.toObjectList(msg.getVideosList(),
    proto.endpoints.flunky.simulator.TimedVideo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.PlayVideosEvent;
  return proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoints.flunky.simulator.TimedVideo;
      reader.readMessage(value,proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader);
      msg.addVideos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.PlayVideosEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TimedVideo videos = 1;
 * @return {!Array<!proto.endpoints.flunky.simulator.TimedVideo>}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.getVideosList = function() {
  return /** @type{!Array<!proto.endpoints.flunky.simulator.TimedVideo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoints.flunky.simulator.TimedVideo, 1));
};


/**
 * @param {!Array<!proto.endpoints.flunky.simulator.TimedVideo>} value
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent} returns this
*/
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.setVideosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoints.flunky.simulator.TimedVideo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.addVideos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoints.flunky.simulator.TimedVideo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoints.flunky.simulator.PlayVideosEvent} returns this
 */
proto.endpoints.flunky.simulator.PlayVideosEvent.prototype.clearVideosList = function() {
  return this.setVideosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoints.flunky.simulator.TimedVideo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.TimedVideo.toObject = function(includeInstance, msg) {
  var f, obj = {
    delay: jspb.Message.getFieldWithDefault(msg, 1, 0),
    videotype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mirrored: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.TimedVideo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoints.flunky.simulator.TimedVideo;
  return proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoints.flunky.simulator.TimedVideo}
 */
proto.endpoints.flunky.simulator.TimedVideo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 2:
      var value = /** @type {!proto.endpoints.flunky.simulator.EnumVideoType} */ (reader.readEnum());
      msg.setVideotype(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirrored(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoints.flunky.simulator.TimedVideo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoints.flunky.simulator.TimedVideo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getVideotype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMirrored();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 delay = 1;
 * @return {number}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EnumVideoType videoType = 2;
 * @return {!proto.endpoints.flunky.simulator.EnumVideoType}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getVideotype = function() {
  return /** @type {!proto.endpoints.flunky.simulator.EnumVideoType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.endpoints.flunky.simulator.EnumVideoType} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setVideotype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool mirrored = 3;
 * @return {boolean}
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.getMirrored = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoints.flunky.simulator.TimedVideo} returns this
 */
proto.endpoints.flunky.simulator.TimedVideo.prototype.setMirrored = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.endpoints.flunky.simulator.EnumVideoType = {
  UNKNOWN_VIDEOTYPE: 0,
  SETUP_VIDEOTYPE: 1,
  HIT_VIDEOTYPE: 2,
  MISS_VIDEOTYPE: 3,
  NEAR_MISS_VIDEOTYPE: 4,
  STOP_VIDEOTYPE: 5
};

goog.object.extend(exports, proto.endpoints.flunky.simulator);
