syntax = "proto3";

package endpoints.flunky.simulator;

option java_multiple_files = true;
option java_outer_classname = "SimulatorProto";
option java_package = "de.flunkyteam.endpoints.projects.simulator";


// A simple Flunkyball API.
//
// The API manages throws and teams. Teams contain players.
service Simulator {

	rpc Throw(ThrowReq) returns (ThrowResp);
	
	rpc Abgegeben(AbgegebenReq) returns (AbgegebenResp);
	
	rpc RegisterPlayer(RegisterPlayerReq) returns (RegisterPlayerResp);
	
	rpc KickPlayer(KickPlayerReq) returns (KickPlayerResp);
	
	rpc SwitchTeam(SwitchTeamReq) returns (SwitchTeamResp);
	
	// resets Strafbier counter, Abgaben, shuffles teams 
	// and plays prepare game clip afterwards
	rpc ResetGame(ResetGameReq) returns (ResetGameResp);
	
	rpc SelectThrowingPlayer(SelectThrowingPlayerReq) returns (SelectThrowingPlayerResp);
	
	rpc ModifyStrafbierCount(ModifyStrafbierCountReq) returns (ModifyStrafbierCountResp);

	rpc SendMessage(SendMessageReq) returns (SendMessageResp);

	rpc StreamState(StreamStateReq) returns (stream StreamStateResp);
	
	rpc StreamVideoEvents(StreamVideoEventsReq) returns (stream StreamVideoEventsResp);
	
	rpc StreamLog(LogReq) returns (stream LogResp);

}

message LogResp{
	string content = 1;
}

message LogReq{}

message StreamVideoEventsResp{
	VideoEvent event = 1;
}

message StreamVideoEventsReq{}

message StreamStateResp{
	GameState state = 1;
}

message StreamStateReq {}

message SelectThrowingPlayerResp {}

message SelectThrowingPlayerReq{
	string playerName = 1;
	string targetName = 2;
}

message ModifyStrafbierCountResp{}

message ModifyStrafbierCountReq{
	string playerName = 1;
	EnumTeams targetTeam = 2;
	bool increment = 3;
}

message SendMessageResp{}

message SendMessageReq{
	string playerName = 1;
	string content = 2;
}

message ResetGameResp {}

message ResetGameReq{
	string playerName = 1;
}

message SwitchTeamResp{};

message SwitchTeamReq{
	string playerName = 1;
	string targetName = 2;
	EnumTeams targetTeam = 3;
}

message KickPlayerResp{};

message KickPlayerReq{
	string playerName = 1;
	string targetName = 2;
}


message RegisterPlayerResp{}

message RegisterPlayerReq{
	string playerName = 1;
}

message AbgegebenResp{};

message AbgegebenReq{
	string playerName = 1;
	string targetName = 2;
	bool setTo = 3;
}

message ThrowReq{
	string playerName = 1;
	EnumThrowStrength strength = 2;
}

message ThrowResp{
	bool success = 1;
}

message VideoEvent{
	oneof event_oneof {
		PrepareVideoEvent prepareVideo = 1;
		PlayVideosEvent playVideos = 2;
  }
}

message PrepareVideoEvent{
	string url = 1;
	EnumVideoType videoType = 2;
}

message PlayVideosEvent{
	repeated TimedVideo videos = 1;
}

message TimedVideo{
	int64 delay =1;
	EnumVideoType videoType = 2;
	bool mirrored = 3;
}

message GameState{
	repeated Player playerTeamA = 1;
	repeated Player playerTeamB = 2;
	repeated Player spectators = 3;
	string throwingPlayer = 10;
	int64 strafbierTeamA = 11;
	int64 strafbierTeamB = 12;
}

message Player{
	string name = 1;
	bool abgegeben = 2;
}


enum EnumThrowStrength {
  UNKNOWN_THROW_STRENGTH = 0;
  SOFT_THROW_STRENGTH = 1;
  MEDIUM_THROW_STRENGTH = 2;
  HARD_THROW_STRENGTH = 3;
}

enum EnumTeams{
  UNKNOWN_TEAMS = 0;
  SPECTATOR_TEAMS = 1;
  TEAM_A_TEAMS = 2;
  TEAM_B_TEAMS =3;
}

enum EnumVideoType{
	UNKNOWN_VIDEOTYPE = 0;
	SETUP_VIDEOTYPE = 1;
	HIT_VIDEOTYPE = 2;
	MISS_VIDEOTYPE = 3;
	NEAR_MISS_VIDEOTYPE = 4;
	STOP_VIDEOTYPE = 5;
}
